generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  username             String    @db.VarChar(50)
  password             String    @db.VarChar(100)
  email                String    @db.VarChar(50)
  resetPasswordToken   String?   @db.VarChar(255)
  resetTokenExpiration DateTime? @db.DateTime(0)

  accounts Account[]
  sessions Session[]
}

model Session {
  id           String   @id @default(uuid())
  refreshToken String   @db.VarChar(255)
  expiresAt    DateTime @db.DateTime(0)
  createdAt    DateTime @default(dbgenerated("(now())")) @db.DateTime(0)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum AccountStatus {
  Active
  Disabled
  Banned
  Pending
}

model Account {
  id         String        @id @default(uuid())
  name       String        @db.VarChar(50)
  balance    Decimal       @db.Decimal(10, 0)
  createdAt  DateTime      @default(now())
  expiresAt  DateTime
  modifiedAt DateTime      @default(now())
  status     AccountStatus @default(Active)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String

  bankAccountType   BankAccountType @relation(fields: [bankAccountTypeId], references: [id])
  bankAccountTypeId String

  Transaction Transaction[]
  Account_ADT Account_ADT[]
}

model Account_ADT {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(50)
  balance    Decimal  @db.Decimal(10, 0)
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

model BankAccountType {
  id   String @id @default(uuid())
  name String @db.VarChar(50)

  Account Account[]
}

model Currency {
  id     String @id @default(uuid())
  name   String @db.VarChar(50)
  code   String @db.VarChar(10)
  symbol String @db.VarChar(10)

  Account Account[]

  @@unique([code, name])
}

enum TransactionType {
  Expense
  Income
}

model Transaction {
  id        String          @id @default(uuid())
  type      TransactionType
  amount    Decimal         @db.Decimal(10, 2)
  date      DateTime        @db.Timestamp(5)
  details   String?
  merchant  String?
  createdAt DateTime        @default(dbgenerated("(now())")) @db.DateTime(0)

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}
